//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GUI.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flight", Namespace="http://schemas.datacontract.org/2004/07/AirlineReservations.Model_Layer")]
    [System.SerializableAttribute()]
    public partial class Flight : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ArrivalTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DepartureLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DepartureTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestinationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FlightNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ArrivalTime {
            get {
                return this.ArrivalTimeField;
            }
            set {
                if ((this.ArrivalTimeField.Equals(value) != true)) {
                    this.ArrivalTimeField = value;
                    this.RaisePropertyChanged("ArrivalTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepartureLocation {
            get {
                return this.DepartureLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartureLocationField, value) != true)) {
                    this.DepartureLocationField = value;
                    this.RaisePropertyChanged("DepartureLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DepartureTime {
            get {
                return this.DepartureTimeField;
            }
            set {
                if ((this.DepartureTimeField.Equals(value) != true)) {
                    this.DepartureTimeField = value;
                    this.RaisePropertyChanged("DepartureTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Destination {
            get {
                return this.DestinationField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationField, value) != true)) {
                    this.DestinationField = value;
                    this.RaisePropertyChanged("Destination");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FlightNo {
            get {
                return this.FlightNoField;
            }
            set {
                if ((this.FlightNoField.Equals(value) != true)) {
                    this.FlightNoField = value;
                    this.RaisePropertyChanged("FlightNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SuccessState", Namespace="http://schemas.datacontract.org/2004/07/AirlineReservations.Model_Layer")]
    public enum SuccessState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BadInput = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DbUnreachable = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Seat", Namespace="http://schemas.datacontract.org/2004/07/AirlineReservations.Model_Layer")]
    [System.SerializableAttribute()]
    public partial class Seat : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BookingNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FlightIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SeatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BookingNo {
            get {
                return this.BookingNoField;
            }
            set {
                if ((this.BookingNoField.Equals(value) != true)) {
                    this.BookingNoField = value;
                    this.RaisePropertyChanged("BookingNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightId {
            get {
                return this.FlightIdField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightIdField, value) != true)) {
                    this.FlightIdField = value;
                    this.RaisePropertyChanged("FlightId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SeatId {
            get {
                return this.SeatIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SeatIdField, value) != true)) {
                    this.SeatIdField = value;
                    this.RaisePropertyChanged("SeatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.Flight_ControllerServiceIF")]
    public interface Flight_ControllerServiceIF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/NewFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/NewFlightResponse")]
        int NewFlight(string modelNo, System.DateTime departure, System.DateTime arrival);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/NewFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/NewFlightResponse")]
        System.Threading.Tasks.Task<int> NewFlightAsync(string modelNo, System.DateTime departure, System.DateTime arrival);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/GetFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/GetFlightResponse")]
        GUI.ServiceReference1.Flight GetFlight(int flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/GetFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/GetFlightResponse")]
        System.Threading.Tasks.Task<GUI.ServiceReference1.Flight> GetFlightAsync(int flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/ListActiveFlights", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/ListActiveFlightsResponse")]
        System.Collections.Generic.List<GUI.ServiceReference1.Flight> ListActiveFlights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/ListActiveFlights", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/ListActiveFlightsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GUI.ServiceReference1.Flight>> ListActiveFlightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/CompleteFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/CompleteFlightResponse")]
        GUI.ServiceReference1.SuccessState CompleteFlight(string flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/CompleteFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/CompleteFlightResponse")]
        System.Threading.Tasks.Task<GUI.ServiceReference1.SuccessState> CompleteFlightAsync(string flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/RemoveFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/RemoveFlightResponse")]
        GUI.ServiceReference1.SuccessState RemoveFlight(int flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/RemoveFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/RemoveFlightResponse")]
        System.Threading.Tasks.Task<GUI.ServiceReference1.SuccessState> RemoveFlightAsync(int flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/GetAllSeats", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/GetAllSeatsResponse")]
        System.Collections.Generic.List<GUI.ServiceReference1.Seat> GetAllSeats(int flight_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/GetAllSeats", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/GetAllSeatsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GUI.ServiceReference1.Seat>> GetAllSeatsAsync(int flight_id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface Flight_ControllerServiceIFChannel : GUI.ServiceReference1.Flight_ControllerServiceIF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Flight_ControllerServiceIFClient : System.ServiceModel.ClientBase<GUI.ServiceReference1.Flight_ControllerServiceIF>, GUI.ServiceReference1.Flight_ControllerServiceIF {
        
        public Flight_ControllerServiceIFClient() {
        }
        
        public Flight_ControllerServiceIFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Flight_ControllerServiceIFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Flight_ControllerServiceIFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Flight_ControllerServiceIFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int NewFlight(string modelNo, System.DateTime departure, System.DateTime arrival) {
            return base.Channel.NewFlight(modelNo, departure, arrival);
        }
        
        public System.Threading.Tasks.Task<int> NewFlightAsync(string modelNo, System.DateTime departure, System.DateTime arrival) {
            return base.Channel.NewFlightAsync(modelNo, departure, arrival);
        }
        
        public GUI.ServiceReference1.Flight GetFlight(int flightID) {
            return base.Channel.GetFlight(flightID);
        }
        
        public System.Threading.Tasks.Task<GUI.ServiceReference1.Flight> GetFlightAsync(int flightID) {
            return base.Channel.GetFlightAsync(flightID);
        }
        
        public System.Collections.Generic.List<GUI.ServiceReference1.Flight> ListActiveFlights() {
            return base.Channel.ListActiveFlights();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GUI.ServiceReference1.Flight>> ListActiveFlightsAsync() {
            return base.Channel.ListActiveFlightsAsync();
        }
        
        public GUI.ServiceReference1.SuccessState CompleteFlight(string flightID) {
            return base.Channel.CompleteFlight(flightID);
        }
        
        public System.Threading.Tasks.Task<GUI.ServiceReference1.SuccessState> CompleteFlightAsync(string flightID) {
            return base.Channel.CompleteFlightAsync(flightID);
        }
        
        public GUI.ServiceReference1.SuccessState RemoveFlight(int flightID) {
            return base.Channel.RemoveFlight(flightID);
        }
        
        public System.Threading.Tasks.Task<GUI.ServiceReference1.SuccessState> RemoveFlightAsync(int flightID) {
            return base.Channel.RemoveFlightAsync(flightID);
        }
        
        public System.Collections.Generic.List<GUI.ServiceReference1.Seat> GetAllSeats(int flight_id) {
            return base.Channel.GetAllSeats(flight_id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GUI.ServiceReference1.Seat>> GetAllSeatsAsync(int flight_id) {
            return base.Channel.GetAllSeatsAsync(flight_id);
        }
    }
}
