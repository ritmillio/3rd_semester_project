//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flight", Namespace="http://schemas.datacontract.org/2004/07/AirlineReservations.Model_Layer")]
    public partial class Flight : object
    {
        
        private System.DateTime ArrivalTimeField;
        
        private string DepartureLocationField;
        
        private System.DateTime DepartureTimeField;
        
        private string DestinationField;
        
        private int FlightNoField;
        
        private string ModelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ArrivalTime
        {
            get
            {
                return this.ArrivalTimeField;
            }
            set
            {
                this.ArrivalTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepartureLocation
        {
            get
            {
                return this.DepartureLocationField;
            }
            set
            {
                this.DepartureLocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DepartureTime
        {
            get
            {
                return this.DepartureTimeField;
            }
            set
            {
                this.DepartureTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Destination
        {
            get
            {
                return this.DestinationField;
            }
            set
            {
                this.DestinationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FlightNo
        {
            get
            {
                return this.FlightNoField;
            }
            set
            {
                this.FlightNoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model
        {
            get
            {
                return this.ModelField;
            }
            set
            {
                this.ModelField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SuccessState", Namespace="http://schemas.datacontract.org/2004/07/AirlineReservations.Model_Layer")]
    public enum SuccessState : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BadInput = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DbUnreachable = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Seat", Namespace="http://schemas.datacontract.org/2004/07/AirlineReservations.Model_Layer")]
    public partial class Seat : object
    {
        
        private int BookingNoField;
        
        private string FlightIdField;
        
        private decimal PriceField;
        
        private string SeatIdField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BookingNo
        {
            get
            {
                return this.BookingNoField;
            }
            set
            {
                this.BookingNoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightId
        {
            get
            {
                return this.FlightIdField;
            }
            set
            {
                this.FlightIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price
        {
            get
            {
                return this.PriceField;
            }
            set
            {
                this.PriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SeatId
        {
            get
            {
                return this.SeatIdField;
            }
            set
            {
                this.SeatIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.Flight_ControllerServiceIF")]
    public interface Flight_ControllerServiceIF
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/NewFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/NewFlightResponse")]
        int NewFlight(string modelNo, System.DateTime departure, System.DateTime arrival);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/NewFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/NewFlightResponse")]
        System.Threading.Tasks.Task<int> NewFlightAsync(string modelNo, System.DateTime departure, System.DateTime arrival);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/GetFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/GetFlightResponse")]
        ServiceReference1.Flight GetFlight(int flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/GetFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/GetFlightResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Flight> GetFlightAsync(int flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/ListActiveFlights", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/ListActiveFlightsResponse")]
        System.Collections.Generic.List<ServiceReference1.Flight> ListActiveFlights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/ListActiveFlights", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/ListActiveFlightsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference1.Flight>> ListActiveFlightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/CompleteFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/CompleteFlightResponse")]
        ServiceReference1.SuccessState CompleteFlight(string flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/CompleteFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/CompleteFlightResponse")]
        System.Threading.Tasks.Task<ServiceReference1.SuccessState> CompleteFlightAsync(string flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/RemoveFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/RemoveFlightResponse")]
        ServiceReference1.SuccessState RemoveFlight(int flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/RemoveFlight", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/RemoveFlightResponse")]
        System.Threading.Tasks.Task<ServiceReference1.SuccessState> RemoveFlightAsync(int flightID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/GetAllSeats", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/GetAllSeatsResponse")]
        System.Collections.Generic.List<ServiceReference1.Seat> GetAllSeats(int flight_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Flight_ControllerServiceIF/GetAllSeats", ReplyAction="http://tempuri.org/Flight_ControllerServiceIF/GetAllSeatsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference1.Seat>> GetAllSeatsAsync(int flight_id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface Flight_ControllerServiceIFChannel : ServiceReference1.Flight_ControllerServiceIF, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class Flight_ControllerServiceIFClient : System.ServiceModel.ClientBase<ServiceReference1.Flight_ControllerServiceIF>, ServiceReference1.Flight_ControllerServiceIF
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Flight_ControllerServiceIFClient() : 
                base(Flight_ControllerServiceIFClient.GetDefaultBinding(), Flight_ControllerServiceIFClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_Flight_ControllerServiceIF.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Flight_ControllerServiceIFClient(EndpointConfiguration endpointConfiguration) : 
                base(Flight_ControllerServiceIFClient.GetBindingForEndpoint(endpointConfiguration), Flight_ControllerServiceIFClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Flight_ControllerServiceIFClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Flight_ControllerServiceIFClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Flight_ControllerServiceIFClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Flight_ControllerServiceIFClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Flight_ControllerServiceIFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public int NewFlight(string modelNo, System.DateTime departure, System.DateTime arrival)
        {
            return base.Channel.NewFlight(modelNo, departure, arrival);
        }
        
        public System.Threading.Tasks.Task<int> NewFlightAsync(string modelNo, System.DateTime departure, System.DateTime arrival)
        {
            return base.Channel.NewFlightAsync(modelNo, departure, arrival);
        }
        
        public ServiceReference1.Flight GetFlight(int flightID)
        {
            return base.Channel.GetFlight(flightID);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Flight> GetFlightAsync(int flightID)
        {
            return base.Channel.GetFlightAsync(flightID);
        }
        
        public System.Collections.Generic.List<ServiceReference1.Flight> ListActiveFlights()
        {
            return base.Channel.ListActiveFlights();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference1.Flight>> ListActiveFlightsAsync()
        {
            return base.Channel.ListActiveFlightsAsync();
        }
        
        public ServiceReference1.SuccessState CompleteFlight(string flightID)
        {
            return base.Channel.CompleteFlight(flightID);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.SuccessState> CompleteFlightAsync(string flightID)
        {
            return base.Channel.CompleteFlightAsync(flightID);
        }
        
        public ServiceReference1.SuccessState RemoveFlight(int flightID)
        {
            return base.Channel.RemoveFlight(flightID);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.SuccessState> RemoveFlightAsync(int flightID)
        {
            return base.Channel.RemoveFlightAsync(flightID);
        }
        
        public System.Collections.Generic.List<ServiceReference1.Seat> GetAllSeats(int flight_id)
        {
            return base.Channel.GetAllSeats(flight_id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference1.Seat>> GetAllSeatsAsync(int flight_id)
        {
            return base.Channel.GetAllSeatsAsync(flight_id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_Flight_ControllerServiceIF))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_Flight_ControllerServiceIF))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/AirlineReservations.Control_Layer/Fli" +
                        "ghtController");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return Flight_ControllerServiceIFClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_Flight_ControllerServiceIF);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return Flight_ControllerServiceIFClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_Flight_ControllerServiceIF);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_Flight_ControllerServiceIF,
        }
    }
}
